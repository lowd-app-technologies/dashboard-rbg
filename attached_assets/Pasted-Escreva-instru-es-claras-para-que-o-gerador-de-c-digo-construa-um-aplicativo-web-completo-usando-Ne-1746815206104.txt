Escreva instruções claras para que o gerador de código construa um aplicativo web completo usando Next.js (React) e Firebase (Authentication e Firestore) com autenticação por Google e e-mail/senha. A aplicação deve permitir que usuários façam login (Firebase Auth) e, após o login, façam o seguinte: Autenticação de Usuário: Configure o Firebase Authentication para suportar login com Google e cadastro/login com e-mail e senha. Ative os provedores correspondentes no console do Firebase​firebase.google.com​medium.com . No código Next.js, inicialize o Firebase Auth e implemente componentes/páginas para login e cadastro, permitindo signin/signout. Use as APIs do Firebase para criar usuários e autenticar via Google (por exemplo, signInWithPopup com GoogleAuthProvider)​firebase.google.com​medium.com . Perfil do Usuário: Após autenticação, cada usuário deve ter um perfil próprio. Permita que o usuário altere seus dados pessoais (nome, e-mail, foto de perfil). Armazene esses dados tanto no perfil do Firebase Auth quanto opcionalmente em uma coleção users no Firestore, mantendo sincronizados os campos essenciais. Por exemplo, atualize o nome e imagem do perfil do usuário logado usando updateProfile do Firebase Auth e salve demais informações em users/{userId}​firebase.google.com . Perfil da Empresa: Associe cada usuário a uma empresa. Crie ou edite um documento na coleção companies com campos: nome da empresa, descrição, CNPJ (opcional), endereço, telefone e site. Relacione esse documento ao usuário proprietário (por exemplo, incluindo o userId ou armazenando companyId no documento do usuário). Isso garante a ligação entre usuários e empresas no Firestore​firebase.google.com . Forneça uma página de perfil da empresa onde o usuário possa preencher/atualizar esses dados. Serviços da Empresa: Cada usuário pode criar um ou mais serviços oferecidos por sua empresa. Para isso, crie documentos na coleção services com campos nome, descrição, valores e horários de funcionamento. Implemente upload de fotos: o usuário deve poder enviar imagens para cada serviço. Use o Firebase Storage para armazenar os arquivos de imagem e salve as URLs resultantes nos documentos de services​firebase.google.com . Forneça uma interface no dashboard para listar, criar e editar esses serviços associados à empresa do usuário. Vagas de Trabalho: Permita que o usuário poste vagas para sua empresa. Cada vaga deve ser um documento na coleção job_offers com campos como título, descrição, tipo de contratação, faixa salarial, requisitos e contato (e-mail ou link). Vincule cada vaga à empresa do usuário (por exemplo, incluindo companyId em job_offers). Forneça páginas/formulários para o usuário criar, editar e listar as vagas publicadas. Interface e Páginas Responsivas: Estruture a interface usando páginas Next.js separadas para cada função: Login/Cadastro: página pública para autenticação (Firebase Auth). Dashboard do Usuário: área restrita que lista os serviços criados, com opções de criar e editar cada serviço. Perfil da Empresa: página onde o usuário visualiza e edita os dados da empresa associada. Vagas de Trabalho: páginas para listar vagas (públicas) e gerenciar vagas (privadas para o dono). Visualização Pública (opcional): páginas públicas que exibem os serviços e vagas disponíveis. Use design responsivo (por exemplo, CSS flex/grid ou frameworks como Tailwind/CSS Modules) para garantir que funcione em dispositivos móveis. Explore Next.js App Router ou Pages Router para definir rotas, usando componentes React funcionais e hooks para estado e efeitos. Banco de Dados Firestore: Organize o Firestore em coleções principais: users, companies, services e job_offers​firebase.google.com . Cada documento deve conter os campos mencionados e chaves de referência (por exemplo, companyId no documento de usuário, ou userId/companyId em services e job_offers). Como Firestore é um banco NoSQL orientado a documentos, modele cada entidade como um documento em sua coleção correspondente​firebase.google.com . Garanta consultas eficientes (use índices compostos do Firestore se necessário) e regras de segurança (Firebase Security Rules) para que usuários só leiam/escrevam seus próprios dados. Escalabilidade e Boas Práticas: Instrua o gerador a produzir código modular e limpo. Por exemplo, crie componentes React reutilizáveis, use Next.js para pré-renderização (SSR ou Static Generation) das páginas públicas quando fizer sentido, e use hooks/context API para gerenciamento de autenticação global. Para uploads de imagem e dados em lote, considere processamento assíncrono. Aplique o padrão de “separação de preocupações”: camadas distintas para autenticação, lógica de UI, acesso ao Firestore, etc. Otimize performance usando recursos do Next.js (como Incremental Static Regeneration ou getServerSideProps quando apropriado) para que a aplicação seja funcional e escalável mesmo com muitos usuários e dados. Cite referências e siga as melhores práticas do Firebase: por exemplo, Firebase Auth permite login com e-mail/senha e Google​firebase.google.com​medium.com , e o Firestore organiza dados em coleções de documentos​firebase.google.com . Além disso, use o Firebase Storage para imagens de serviços​firebase.google.com . Este prompt deve gerar um aplicativo completo que atenda a todos os requisitos acima de forma coesa e escalável. Referências: As instruções acima seguem orientações de integração do Firebase com Next.js​firebase.google.com​firebase.google.com​firebase.google.com , garantindo que a aplicação use autenticação segura e um modelo de dados adequado.

